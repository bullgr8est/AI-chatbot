<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>モバイル向けチャットボット（ES5安定・強制起動＆生エラー表示）</title>
  <style>
    :root { --bg:#f5f6f8; --bubble-user:#D1ECF1; --bubble-bot:#F8D7DA; --input-bg:#FFF3CD; --text:#111827; --err:#EF4444 }
    html,body{height:100%;margin:0;background:var(--bg);color:var(--text);font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Noto Sans JP","Hiragino Kaku Gothic ProN","Yu Gothic","YuGothic","Helvetica Neue",Arial,sans-serif}
    .app{height:100%;display:flex;flex-direction:column}
    header{position:sticky;top:0;background:#fff;border-bottom:1px solid #e5e7eb;padding:12px 16px;font-weight:600;display:flex;align-items:center;justify-content:space-between;z-index:10}
    header .actions button{margin-left:8px;border:1px solid #e5e7eb;background:#fff;padding:6px 10px;border-radius:10px;font-size:14px;cursor:pointer}
    .messages{flex:1;overflow-y:auto;padding:12px 12px 24px 12px;scroll-behavior:smooth}
    .row{display:flex;margin:8px 0}
    .row.user{justify-content:flex-end}
    .row.bot{justify-content:flex-start}
    .bubble{max-width:min(80%,640px);padding:10px 14px;border-radius:14px;line-height:1.5;box-shadow:0 1px 2px rgba(0,0,0,.06);word-wrap:break-word;white-space:pre-wrap}
    .user .bubble{background:var(--bubble-user)}
    .bot .bubble{background:var(--bubble-bot)}
    .bubble.err{background:#FEE2E2;color:var(--err);border:1px solid #fecaca}
    .composer{position:sticky;bottom:0;background:#fff;border-top:1px solid #e5e7eb;padding:env(safe-area-inset-bottom) 12px 12px 12px}
    .inputwrap{display:flex;background:var(--input-bg);border:1px solid #f2e8b3;border-radius:14px;padding:8px;gap:8px;align-items:flex-end}
    textarea{flex:1;border:none;outline:none;background:transparent;font-size:16px;resize:none;max-height:38vh}
    .send{border:none;background:#111827;color:#fff;padding:10px 14px;border-radius:12px;font-size:15px;min-width:72px;cursor:pointer}
    .hint{font-size:12px;color:#6b7280;margin-top:6px;text-align:center}
    .premsg{font-size:13px;color:#374151;padding:8px 12px}
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div>チャットボット（強制起動モード）</div>
      <div class="actions">
        <button id="download">ログ保存</button>
        <button id="reset">リセット</button>
      </div>
    </header>

    <div id="messages" class="messages" aria-live="polite">
      <div class="premsg">⏳ 読み込み中…（ここから進まない場合でも、下の「リセット」を押すと初期挨拶が出ます）</div>
    </div>

    <div class="composer">
      <div class="inputwrap">
        <textarea id="input" rows="1" placeholder="> メッセージを入力" autofocus></textarea>
        <button class="send" id="send">送信</button>
      </div>
      <div class="hint">Enterで送信 / Shift+Enterで改行</div>
    </div>
  </div>

  <script>
  (function(){
    // ====== 設定 ======
    var BOT_GAP_MS = 800;           // Bot連続発話の最小間
    var LS_KEY     = 'mobile-chatbot-es5-v3';

    // ====== DOM参照 ======
    var $messages=document.getElementById('messages');
    var $input   =document.getElementById('input');
    var $send    =document.getElementById('send');
    var $download=document.getElementById('download');
    var $reset   =document.getElementById('reset');

    // ====== 生エラーバブル（addMessageが壊れていても出る） ======
    function rawBubble(text, isError){
      try{
        var row=document.createElement('div');
        row.className='row bot';
        var bubble=document.createElement('div');
        bubble.className='bubble'+(isError?' err':'');
        bubble.textContent=text;
        row.appendChild(bubble);
        ($messages||document.body).appendChild(row);
      }catch(e){ /* 何もできない場合は黙る */ }
    }

    // ====== グローバルエラーは必ず画面に可視化 ======
    window.onerror = function(msg, src, line, col){
      rawBubble('⚠️ JavaScriptエラー: '+msg+' @'+(line||'?'), true);
      return false;
    };

    // ====== 状態 ======
    var waitingForExplanation=false; // セット中に「それから？」を出すフラグ
    var sorekaraCount=0; var continueAsking=true;
    var introIndex=0; var inIntro=true; var participantName='';
    var rapportPending=false; var lastRapportTopic='';
    var inMain=false; var mainSetCount=0; var currentOpenTopic='';
    var pendingFollowupPrompt=null; // セット終了後に自動で出す次のオープン質問

    // メイン用の優先トピック（人物→会話内容→場所→その他）
    var mainRootTopic='';
    var primaryTopics=[]; var usedTopicsMap={};

    var log=[];

    // ====== 表示（Botの連続発話に間を入れる） ======
    var lastBotScheduledAt = 0;
    function addMessage(speaker,text,delayOverride,isError){
      var now = Date.now();
      var delay = 0;
      if(speaker==='bot'){
        var earliest = lastBotScheduledAt ? lastBotScheduledAt + BOT_GAP_MS : now;
        delay = Math.max(0, earliest - now);
        if(typeof delayOverride==='number') delay = delayOverride; // 明示指定があれば優先
        lastBotScheduledAt = now + delay;
      }
      log.push({speaker:speaker,text:text});
      setTimeout(function(){
        var row=document.createElement('div');
        row.className='row ' + (speaker==='user'?'user':'bot');
        var bubble=document.createElement('div');
        bubble.className='bubble' + (isError?' err':'');
        bubble.textContent=text;
        row.appendChild(bubble);
        $messages.appendChild(row);
        $messages.scrollTop=$messages.scrollHeight;
      }, delay);
    }

    // ====== ユーティリティ ======
    function segPush(arr, items){ for(var i=0;i<items.length;i++){ arr.push(items[i]); } }
    function simpleSegment(text){
      text = (text||'');
      var chunks=text.replace(/[\s\t\n\r]+/g,' ').split(/[、，。\.\?!！？,\-\/\(\)「」『』\[\]…]+/);
      var segs=[]; for(var i=0;i<chunks.length;i++){ var ch=chunks[i]; var m=ch && ch.match(/[\u4E00-\u9FFFァ-ヾぁ-ゖー々]+|[A-Za-z0-9_]+/g); if(m) segPush(segs,m); }
      return segs.filter(function(s){return s&&s.trim()});
    }
    function normalize(s){ return (s||'').replace(/\s+/g,'').replace(/[。\.!？\?,〜~・「」『』\-]/g,'').toLowerCase(); }
    function isNegative(a){ var n=['ではない','じゃない','違','ちが','嘘','うそ','いいえ','no','nottrue','本当でない','本当ではない']; return includesAny(a,n); }
    function isAffirmative(a){ var p=['はい','うん','本当','ほんとう','ほんと','true','そう','正しい','正解','合ってる','あってる','そのとおり','その通り','ok']; return !isNegative(a)&&includesAny(a,p); }
    function isUnknown(a){ var u=['知らない','しらない','知りません','わからない','分からない','わかりません','存じません','しりません','知らん']; return includesAny(a,u); }
    function includesAny(text, arr){ text=(text||''); for(var i=0;i<arr.length;i++){ if(text.indexOf(arr[i])>-1) return true; } return false; }

    function extractName(ans){ var s=(ans||'').trim().replace(/[。！!？?]+$/,''); s=s.replace(/(と申します|ともうします|と申す|といいます|と言います)$/,''); s=s.replace(/です$/,''); s=s.replace(/^私は?/,''); return s.trim()||ans.trim(); }
    function extractNounLikeTokens(text){ var segs=simpleSegment(text); var arr=[]; for(var i=0;i<segs.length;i++){ arr.push([segs[i],segs[i].length]); } arr.sort(function(a,b){return b[1]-a[1]}); var out=[]; for(i=0;i<arr.length;i++){ out.push(arr[i][0]); } return out.filter(function(s){return s.length>=2}); }

    // === rehearsal用：文脈付きトピック抽出 ===
    function pickContextualTopic(ans){
      var input=(ans||'');
      var clauses = input.split(/[、，。\.\s]+/);
      var patterns = [
        { re:/(電車|列車|地下鉄|モノレール).*?(乗|のっ)/, label:'電車に乗ったとき' },
        { re:/(バス).*?(乗|のっ)/, label:'バスに乗ったとき' },
        { re:/(自転車|チャリ).*?(乗|こい|漕)/, label:'自転車で移動したとき' },
        { re:/朝ごはん|朝食|朝飯|ごはん.*?食べ|食事.*?した|食べ(た)?/, label:'朝ごはんを食べたとき' },
        { re:/身支度|支度|したく|着替え(た)?|服に着替え/, label:'身支度をしたとき' },
        { re:/家(を)?出(て)?|出発(し)?/, label:'家を出たとき' },
        { re:/(駅から).*?(歩|ある)い|歩い?て(きた|向かった)/, label:'歩いてきたとき' }
      ];
      for(var i=0;i<clauses.length;i++){
        var clause=(clauses[i]||'').trim(); if(!clause) continue;
        for(var j=0;j<patterns.length;j++){ if(patterns[j].re.test(clause)) return patterns[j].label; }
      }
      var segs=extractNounLikeTokens(input); if(segs.length) return segs[0]; return 'そのこと';
    }

    // === main_entry用：トピック整形 ===
    function refineTopicFromMainEntry(ans){
      var s=(ans||'').trim().replace(/[。！!？?]+$/,'');
      var regs=[
        /(.*?)(?:について)?(?:を)?(?:話|はな)しに(?:来|き)ました?$/,
        /(.*?)(?:について)?(?:を)?(?:話|はな)しに(?:来|き)た$/,
        /(.*?)(?:に)?ついて(?:です|だ|を話す|話しました?)$/,
        /(.*?)(?:の)?内容(?:を)?(?:話|はな)しに(?:来|き)ました?$/,
        /(.*?)(?:の)?内容(?:を)?(?:話|はな)しに(?:来|き)た$/
      ];
      for(var i=0;i<regs.length;i++){ var m=s.match(regs[i]); if(m && m[1] && m[1].trim()){ s=m[1].trim(); break; } }
      s=s.replace(/(について|のこと|の件|とか|など|とかについて)$/,'');
      return s||'そのこと';
    }

    // === 年齢表現・役割語・場所・会話内容の検出 ===
    function detectAgePhrase(text){ var m = (text||'').match(/([0-9０-９]+)\s*(代|歳|才)/); if(!m) return ''; return toHalf(m[1])+m[2]; }
    function toHalf(s){ return (s||'').replace(/[０-９]/g,function(c){return String.fromCharCode(c.charCodeAt(0)-0xFEE0)}); }
    var ROLE_WORDS = ['上司','部下','同僚','友達','友人','父','母','お父さん','お母さん','先生','警察','警官','店員','客','犯人','被害者','男性','女性','男の人','女の人','子ども','子供','先輩','後輩','同級生','同居人','隣人','保護者','兄','弟','姉','妹'];
    function findRoleInText(text){ text=(text||''); for(var i=0;i<ROLE_WORDS.length;i++){ if(text.indexOf(ROLE_WORDS[i])>-1) return ROLE_WORDS[i]; } return ''; }
    var PLACE_WORDS = ['オフィス','会社','職場','事務所','会議室','駅','改札','ホーム','電車内','車内','車両','駅前','カフェ','喫茶店','食堂','コンビニ','スーパー','自宅','家','玄関','廊下','エントランス','教室','学校','校内','公園','広場','トイレ','ロビー'];
    var CONV_PATTERNS = [
      {re:/デート|誘(っ|い)た|誘われた|誘い/, label:'デートに誘ったこと'},
      {re:/断られ|断っ|断り|断った/, label:'断られたこと'},
      {re:/怒っ|怒り|叱っ|叱り/, label:'怒ったこと'},
      {re:/昇進|昇格.*(無|なし|ない)|昇進は?無|昇進は?なし/, label:'昇進の話'},
      {re:/彼女|恋人|婚約者/, label:'彼女がいること'},
      {re:/注意し|注意さ|注意された|注意した/, label:'注意したこと'},
      {re:/謝っ|謝罪/, label:'謝ったこと'}
    ];
    function findPlaceInText(text){ text=(text||''); for(var i=0;i<PLACE_WORDS.length;i++){ if(text.indexOf(PLACE_WORDS[i])>-1) return PLACE_WORDS[i]; } return ''; }
    function findConversationLabel(text){ text=(text||''); for(var i=0;i<CONV_PATTERNS.length;i++){ if(CONV_PATTERNS[i].re.test(text)) return CONV_PATTERNS[i].label; } return ''; }
    function cleanTopic(s){ if(!s) return s; s=s.replace(/(について|のこと|の件|とか|など)$/,''); s=s.replace(/(ぐらい|くらい|ほど)$/,''); s=s.replace(/(でした|だった|です|ます)$/,''); if(['こと','もの','代','それ','これ'].indexOf(s)>-1) return ''; return s; }
    function chooseSalientTopic(text){ var role=findRoleInText(text); if(role) return role; var age=detectAgePhrase(text); if(age) return age; var tokens=extractNounLikeTokens(text); var i, tClean=[]; for(i=0;i<tokens.length;i++){ var t=cleanTopic(tokens[i]); if(t) tClean.push(t); } return tClean[0]||'そのこと'; }

    // === 「〜が好き」正規化 → 自然なオープン質問 ===
    function normalizeLikeActivityText(ans){
      var s=(ans||'').trim(); if(!s) return null; s=s.replace(/ご飯/g,'ごはん');
      var verbAlt = '(食べる|たべる|見る|観る|みる|聞く|聴く|きく|読む|よむ|作る|つくる|描く|かく|撮る|弾く|遊ぶ|あそぶ|走る|はしる|泳ぐ|およぐ|歌う|うたう|踊る|おどる|乗る|のる|歩く|あるく|行く|いく|する|やる)';
      var m = s.match(new RegExp('(.+?)(?:を|が)?'+verbAlt+'の?が?好き$'));
      var canon={ 'みる':'見る','よむ':'読む','たべる':'食べる','きく':'聞く','およぐ':'泳ぐ','はしる':'走る','あるく':'歩く','のる':'乗る','あそぶ':'遊ぶ','うたう':'歌う','おどる':'踊る','つくる':'作る','かく':'描く','いく':'行く' };
      if(m && (m[1]||'').trim()){
        var obj=(m[1]||'').trim(); var v=(m[2]||'').trim();
        obj=obj.replace(/(の|な|だ|です|する|します|した|してる|しています|とか|など)$/,'');
        v = canon[v] || v; if(/音楽/.test(obj) && v==='聞く') v='聴く';
        var ni=['乗る','行く']; var wo=['食べる','読む','見る','観る','聞く','聴く','撮る','弾く','作る','描く'];
        if(v==='する'||v==='やる') return obj+'をする';
        if(indexOf(ni,v)>-1) return obj+'に'+v;
        if(indexOf(wo,v)>-1) return obj+'を'+v;
        return obj+v;
      }
      var m2 = s.match(new RegExp('^'+verbAlt+'の?が?好き$'));
      if(m2){ var v2=m2[1]; v2 = canon[v2] || v2; return v2; }
      return null;
    }
    function indexOf(arr, v){ for(var i=0;i<arr.length;i++){ if(arr[i]===v) return i; } return -1; }
    function buildOpenQuestionFromLike(ans){
      var norm = normalizeLikeActivityText(ans);
      if(norm){ return norm+'ときのことについてもっと詳しく教えてください。'; }
      var cleaned=(ans||'').trim().replace(/の?が?好き$/,'');
      if(cleaned && isVerbish(cleaned, ans)){ return cleaned+'ときのことについてもっと詳しく教えてください。'; }
      var topic=(extractNounLikeTokens(ans)[0]||ans.trim()).replace(/ご飯/g,'ごはん');
      if(isVerbish(topic,ans)){ topic=topic.replace(/の?が?好き$/,''); return topic+'ときのことについてもっと詳しく教えてください。'; }
      return topic+'をするときのことについてもっと詳しく教えてください。';
    }

    // === 動詞らしさ（簡易） ===
    function isVerbish(phrase, original){ var p=(phrase||'').trim(), o=(original||'').trim(); if(/(する|やる|行く|いく|見る|みる|食べる|たべる|遊ぶ|あそぶ|読む|よむ|作る|つくる|描く|かく|走る|はしる|泳ぐ|およぐ|歌う|うたう|踊る|おどる|乗る|のる|歩く|あるく)$/.test(p)) return true; if(/(する|やる|行く|見る|食べる|遊ぶ|読む|作る|描く|走る|泳ぐ|歌う|踊る|乗る|歩く).{0,3}好き/.test(o)) return true; return false; }

    // ▼ 追加：フォローアップ（「それから？」）のバリエーション
    var FOLLOWUP_VARIANTS = ['それから？','それで？','そのあとは？','他にも教えて？'];
    var _lastFollowupVariant = '';
    function nextFollowup(){
      var opts = FOLLOWUP_VARIANTS.slice(0);
      if(_lastFollowupVariant){
        var i = opts.indexOf(_lastFollowupVariant);
        if(i>-1) opts.splice(i,1);
      }
      var pick = opts[Math.floor(Math.random()*opts.length)];
      _lastFollowupVariant = pick;
      return pick;
    }

    // ====== イントロフロー ======
    var introFlow=[
      {type:'bot',text:'こんにちは。今日はお話に来てくれて，どうもありがとう。'},
      {type:'bot',text:'お名前を教えてください。'},
      {type:'user_expected',id:'name',validator:function(ans){var name=extractName(ans); if(!name) return {ok:false,feedback:'お名前を教えてください。'}; participantName=name; return {ok:true,onSuccessBot:function(raw){return extractName(raw)+'さん、教えてくれてありがとう。'}};}},
      {type:'bot',text:'私の仕事は子どもからお話を聞くことです。'},
      {type:'bot',text:'この会話は記録します。私がお話を忘れないように，後で見ればわかるようにするためです。'},
      {type:'bot',text:'他の人が見ることもありますが，(相手の名前)さんに迷惑がかかることはありません。'},

      {type:'bot',text:'面接を始める前にお約束があります。'},
      {type:'bot',text:'今日は，本当のことだけを話すのがとても大切です。本当にあったことだけを話してください。'},
      {type:'bot',text:'では練習してみましょう。「私は(相手の名前)さんと同じ部屋にいます」と言ったら，これは本当ですか，本当ではありませんか。'},
      {type:'user_expected',id:'truth_q1',validator:function(ansRaw){var a=normalize(ansRaw);var ok=isNegative(a)||a.indexOf('同じ部屋ではない')>-1||a.indexOf('同じ部屋じゃない')>-1||a.indexOf('別の部屋')>-1||a.indexOf('同室ではない')>-1||a.indexOf('同室じゃない')>-1||a.indexOf('違う部屋')>-1||a.indexOf('オンライン')>-1||a.indexOf('リモート')>-1||a.indexOf('画面越し')>-1; if(ok){return{ok:true,onSuccessBot:'そうですね。私は(相手の名前)さんと同じ部屋にいないので、本当ではありませんね。'}} else {return{ok:false,feedback:'ここは「本当ではない」です。次に進みますね。'}};}},
      {type:'bot',text:'では，(相手の名前)さんが今，座っていると言ったら，これは本当ですか，本当ではありませんか。'},
      {type:'user_expected',id:'truth_q2',validator:function(ansRaw){var a=normalize(ansRaw);var ok=isAffirmative(a)||a.indexOf('本当です')>-1||a.indexOf('本当だ')>-1||a.indexOf('座っている')>-1; if(ok&&!isNegative(a)){return{ok:true,onSuccessBot:'そうですね。(相手の名前)さんは座っているので本当ですね。'}} else {return{ok:false,feedback:'ここは「本当」です。次に進みますね。'}};}},
      {type:'bot',text:'(相手の名前)さんが本当のことと本当でないことの区別がよくわかっている，ということがわかりました。今日は，本当にあったことだけを話してください。'},

      {type:'bot',text:'もしも私の質問の意味がわからなかったら，「わからない」と言ってください。'},
      {type:'bot',text:'もしも私の質問の答えを知らなかったら，「知らない」と言ってください。では練習してみましょう。'},
      {type:'bot',text:'「私が飼っている犬の名前は何ですか」と聞いたら，(相手の名前)さんは何と答えますか。'},
      {type:'user_expected',id:'dog_q',validator:function(ansRaw){var a=normalize(ansRaw); if(isUnknown(a)){return{ok:true,onSuccessBot:function(ans){return 'そうですね。知らないときは今のように「'+(ans||'').trim()+'」と言ってください。';}}} else {return{ok:false,feedback:'(相手の名前)さんは私の家に来たことがないので、正しくは「知らない」です。次に進みますね。'}};}},

      {type:'bot',text:'もしも私が間違ったことを言ったら，「間違ってるよ」と言ってください。では練習してみましょう。'},
      {type:'bot',text:'私が(相手の名前)さんは2歳ですねと言ったら，(相手の名前)さんは何と言いますか。'},
      {type:'user_expected',id:'mistake_q',validator:function(ansRaw){var a=normalize(ansRaw);var okPhrases=['間違ってる','まちがってる','違ってる','ちがってる','違う','ちがう','違います','ちがいます','それは違う','ちがうよ','違うよ'];var ok=false;for(var i=0;i<okPhrases.length;i++){if(a.indexOf(okPhrases[i])>-1){ok=true;break}} if(ok){return{ok:true,onSuccessBot:function(ans){return 'そうですね。私が間違ったら，今のように「'+(ans||'').trim()+'」と言って教えてください。';}}} else {return{ok:false,feedback:'この場面は「間違ってる」や「違ってる」と教えてくれればOKです。次に進みますね。'}};}},

      {type:'bot',text:'私はその場にいなかったので，何があったかわかりません。どんなことでも，あったことを全部話してください。'},

      {type:'bot',text:'(相手の名前)さんのことをもっと知りたいので聞きますね。(相手の名前)さんは何をするのが好きですか。'},
      {type:'user_expected',id:'rapport_like',validator:function(ans){ if(!(ans||'').trim()) return {ok:false,feedback:'何をするのが好きか教えてください。'}; var prompt = buildOpenQuestionFromLike(ans); lastRapportTopic = prompt; rapportPending = true; return {ok:true,onSuccessBot: prompt}; }},

      // ▼ 追加：好きなことの詳細に答えてくれた後の「ありがとう」挿入ポイント
      {type:'user_expected',id:'rapport_like_follow',validator:function(ans){ if(!(ans||'').trim()) return {ok:false,feedback:'さっきのことについてもう少し教えてください。'}; rapportPending=false; return {ok:true,onSuccessBot:'よくわかりました。ありがとう。このようにたくさん話してくれるとよくわかります。今のようにたくさんお話してください。'} }},

      {type:'bot',text:'それでは前のことを思い出してお話する練習をしましょう。朝起きてからここに来るまでのことを最初から最後まで全部話してください。'},
      {type:'user_expected',id:'rehearsal',validator:function(ans){ if(!(ans||'').trim())return{ok:false,feedback:'朝からここに来るまでにあったことを教えてください。'}; var t = pickContextualTopic(ans); lastRapportTopic=t; rapportPending=true; var detailPrompt = t+'のことをもっと詳しく教えてください。'; return{ok:true,onSuccessBot:detailPrompt} }},
      {type:'user_expected',id:'rehearsal_follow',validator:function(ans){ if(!(ans||'').trim())return{ok:false,feedback:'さっきのことについてもう少し教えてください。'}; rapportPending=false; return{ok:true,onSuccessBot:'はい，よくわかりました。どうもありがとう。このようにたくさん話してくれるとよくわかります。今のようにたくさんお話してください。'} }},

      {type:'bot',text:'それでは，聞き取りを始めます。今日は何をお話しに来ましたか。'},
      {type:'user_expected',id:'main_entry',validator:function(ans){ var t = refineTopicFromMainEntry(ans); inIntro=false; inMain=true; mainSetCount=0; currentOpenTopic=t; waitingForExplanation=true; sorekaraCount=0; mainRootTopic=t; primaryTopics=[]; usedTopicsMap={}; return{ok:true,onSuccessBot:t+'についてもう少し詳しく教えて。'} }}
    ];

    function replaceName(text){ return (text||'').replace(/\(相手の名前\)/g, participantName||'あなた'); }
    function nextIntroBotLine(){ var step=introFlow[introIndex]; if(!step){inIntro=false;return null} if(step.type==='bot'){ introIndex++; return replaceName(step.text); } return null }
    function handleIntroUserInput(userText){ var step=introFlow[introIndex]; if(!step){inIntro=false;return 'OK'} if(step.type!=='user_expected'){ var botLine=nextIntroBotLine(); return botLine||'OK'; } var res=step.validator(userText||''); introIndex++; if(res&&res.ok&&res.onSuccessBot){ var msg= (typeof res.onSuccessBot==='function')? res.onSuccessBot(userText) : res.onSuccessBot; return replaceName(msg); } if(res&&!res.ok&&res.feedback){ return replaceName(res.feedback); } return nextIntroBotLine()||'OK'; }
    function autoAdvanceIntro(){ while(inIntro){ if(rapportPending)break; var step=introFlow[introIndex]; if(!step||step.type!=='bot')break; var line=nextIntroBotLine(); if(line) addMessage('bot',line); else break; } }

    // ====== 本題ループ（オープン質問→それから×3）×5セット ======
    function extractPrimaryCandidates(text){
      var list=[]; text=(text||'');
      // 1) 人物（最優先）
      var role=findRoleInText(text); if(role) list.push(role);
      // 2) 会話内容
      var conv=findConversationLabel(text); if(conv) list.push(conv);
      // 3) 場所
      var place=findPlaceInText(text); if(place) list.push(place);
      // 4) 名詞キーワード（冗長語除去）
      var tokens=extractNounLikeTokens(text); var j; for(j=0;j<tokens.length;j++){ var t=cleanTopic(tokens[j]); if(t && indexOf(list,t)===-1) list.push(t); }
      // フィルタ：年齢単独は候補にしない
      var out=[]; var k; for(k=0;k<list.length;k++){ if(!(/^[ \t\r\n]*[0-9]+[ \t\r\n]*(代|歳|才)[ \t\r\n]*$/).test(list[k]||'')) out.push(list[k]); }
      return out;
    }
    function addPrimaryCandidatesFromText(t){ var c=extractPrimaryCandidates(t); var i; for(i=0;i<c.length;i++){ var x=c[i]; if(!usedTopicsMap[x] && indexOf(primaryTopics,x)===-1) primaryTopics.push(x); } }
    function pickNonAgeRoleFromLog(){ var i; for(i=log.length-1;i>=0;i--){ var m=log[i]; if(m.speaker!=='user') continue; var r=findRoleInText(m.text); if(r && !usedTopicsMap[r]) return r; } return ''; }
    function pickConversationFromLog(){ var i; for(i=log.length-1;i>=0;i--){ var m=log[i]; if(m.speaker!=='user') continue; var lab=findConversationLabel(m.text); if(lab && !usedTopicsMap[lab]) return lab; } return ''; }
    function pickPlaceFromLog(){ var i; for(i=log.length-1;i>=0;i--){ var m=log[i]; if(m.speaker!=='user') continue; var pl=findPlaceInText(m.text); if(pl && !usedTopicsMap[pl]) return pl; } return ''; }
    function pickNextTopic(){
      var i;
      // 1) 初回候補 primaryTopics を優先度順に探索（人物→会話内容→場所→その他）
      var orders=['person','conversation','place','other'];
      function isPersonTopic(s){ var q; for(q=0;q<ROLE_WORDS.length;q++){ if((s||'').indexOf(ROLE_WORDS[q])>-1) return true; } return false; }
      function isConversationTopic(s){ var q; for(q=0;q<CONV_PATTERNS.length;q++){ if(CONV_PATTERNS[q].label===s) return true; } return /デート|誘|断|怒|昇進|昇格|注意|謝|話/.test(s||''); }
      function isPlaceTopic(s){ var q; for(q=0;q<PLACE_WORDS.length;q++){ if((s||'').indexOf(PLACE_WORDS[q])>-1) return true; } return false; }
      function getKind(s){ if(isPersonTopic(s)) return 'person'; if(isConversationTopic(s)) return 'conversation'; if(isPlaceTopic(s)) return 'place'; return 'other'; }
      for(var oi=0; oi<orders.length; oi++){
        var want=orders[oi];
        for(i=0;i<primaryTopics.length;i++){
          var t=primaryTopics[i]; if(usedTopicsMap[t]) continue; if(getKind(t)===want) return t;
        }
      }
      // 2) ログから優先度順に探索
      var r=pickNonAgeRoleFromLog(); if(r) return r;
      var c=pickConversationFromLog(); if(c) return c;
      var p=pickPlaceFromLog(); if(p) return p;
      // 3) ログから一般名詞（年齢は除外）
      for(i=log.length-1;i>=0;i--){ var m=log[i]; if(m.speaker!=='user') continue; var toks=extractNounLikeTokens(m.text); for(var j=0;j<toks.length;j++){ var cand=cleanTopic(toks[j]); if(cand && !(/^[ \t\r\n]*[0-9]+[ \t\r\n]*(代|歳|才)[ \t\r\n]*$/).test(cand||'') && !usedTopicsMap[cand]) return cand; } }
      return '';
    }
    function guessNextOpenTopicFromLog(){
      var r=pickNonAgeRoleFromLog(); if(r) return r; var c=pickConversationFromLog(); if(c) return c; var p=pickPlaceFromLog(); if(p) return p; return currentOpenTopic||'そのこと';
    }

    function handleMainFlow(userInput){
      if(inMain && waitingForExplanation && mainSetCount===0){ addPrimaryCandidatesFromText(userInput); }
      if(waitingForExplanation){
        if(sorekaraCount<3){sorekaraCount+=1;return nextFollowup();}
        waitingForExplanation=false; sorekaraCount=0; mainSetCount+=1;
        if(mainSetCount>=5){ continueAsking=false; return '今日はここまでにします。お話をありがとう。'; }
        var nextTopic = pickNextTopic(); if(!nextTopic) nextTopic = guessNextOpenTopicFromLog(); if(!nextTopic) nextTopic = currentOpenTopic||'そのこと';
        usedTopicsMap[nextTopic]=true; pendingFollowupPrompt = nextTopic+'についてもう少し詳しく教えて。';
        return 'なるほど、ありがとう。';
      }
      waitingForExplanation=true; sorekaraCount=0; return nextFollowup();
    }

    function getBotResponse(userInput){ if(normalize(userInput)==='おしまい'){ continueAsking=false;waitingForExplanation=false;sorekaraCount=0;inIntro=false;rapportPending=false;inMain=false;return '了解しました。これで終了します。' } if(inIntro){ var reply=handleIntroUserInput(userInput); if(reply&&reply!=='OK')return reply; var next=nextIntroBotLine(); if(next)return next; inIntro=false; } if(inMain){ return handleMainFlow(userInput) } if(!continueAsking) return 'セッションは終了しました。'; var topic = chooseSalientTopic(userInput); waitingForExplanation=true; sorekaraCount=0; return topic+'について、もう少し詳しく教えて？'; }

    // ====== 入出力 ======
    function sendCurrent(){ var text=$input.value.trim(); if(!text)return; addMessage('user',text); var bot=getBotResponse(text); if(bot) addMessage('bot',bot); if(pendingFollowupPrompt){ addMessage('bot', pendingFollowupPrompt); pendingFollowupPrompt=null; waitingForExplanation=true; sorekaraCount=0; inMain=true; } $input.value=''; resizeTextarea(); setTimeout(function(){try{$input.focus()}catch(e){}},0); persist(); autoAdvanceIntro(); }
    function resizeTextarea(){ $input.style.height='auto'; $input.style.height=Math.min($input.scrollHeight,window.innerHeight*0.38)+'px' }

    // ====== 保存・復元 ======
    function persist(){ try{ localStorage.setItem(LS_KEY,JSON.stringify({ log:log,waitingForExplanation:waitingForExplanation,sorekaraCount:sorekaraCount,continueAsking:continueAsking,introIndex:introIndex,inIntro:inIntro,participantName:participantName,rapportPending:rapportPending,lastRapportTopic:lastRapportTopic,inMain:inMain,mainSetCount:mainSetCount,currentOpenTopic:currentOpenTopic })) }catch(e){} }
    function restore(){ try{ var saved=JSON.parse(localStorage.getItem(LS_KEY)||'null'); if(saved&&saved.log&&saved.log.length>0){ waitingForExplanation=!!saved.waitingForExplanation; sorekaraCount=saved.sorekaraCount||0; continueAsking=saved.continueAsking!==false; introIndex=saved.introIndex||0; inIntro=saved.inIntro!==false&&(introIndex<introFlow.length); participantName=saved.participantName||''; rapportPending=!!saved.rapportPending; lastRapportTopic=saved.lastRapportTopic||''; inMain=!!saved.inMain; mainSetCount=saved.mainSetCount||0; currentOpenTopic=saved.currentOpenTopic||''; var i; for(i=0;i<saved.log.length;i++){ addMessage(saved.log[i].speaker,saved.log[i].text,0); } return true } }catch(e){} return false }

    // ====== 初期化 ======
    function init(){
      // 先にプリメッセージを消す
      var pm=document.querySelector('.premsg'); if(pm&&pm.parentNode) pm.parentNode.removeChild(pm);
      introIndex=0;inIntro=true;waitingForExplanation=false;sorekaraCount=0;continueAsking=true;participantName='';rapportPending=false;lastRapportTopic='';inMain=false;mainSetCount=0;currentOpenTopic='';pendingFollowupPrompt=null;mainRootTopic='';primaryTopics=[];usedTopicsMap={};
      // 最初の挨拶を強制的に描画
      addMessage('bot','こんにちは。今日はお話に来てくれて，どうもありがとう。',0);
      addMessage('bot','お名前を教えてください。',0);
      // イントロロジックの先行バッファと整合させるため、introIndexを2に進める
      introIndex=2;
    }

    // ====== 起動 & イベント ======
    function boot(){ try{ if(!restore()) init(); resizeTextarea(); $send.onclick=sendCurrent; $input.onkeydown=function(e){ e=e||window.event; var key=e.key||e.keyCode; if((key==='Enter'||key===13)&&!e.shiftKey){ if(e.preventDefault) e.preventDefault; else e.returnValue=false; sendCurrent(); } }; $input.oninput=resizeTextarea; $download.onclick=function(){ var lines=log.map(function(m){return (m.speaker==='user'?'ユーザー':'Bot')+': '+m.text}); var blob=new Blob([lines.join('\n')],{type:'text/plain;charset=utf-8'}); var url=URL.createObjectURL(blob); var a=document.createElement('a'); a.href=url;a.download='conversation_log.txt'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }; $reset.onclick=function(){ log.length=0; localStorage.removeItem(LS_KEY); document.location.reload(); }; setTimeout(function(){ if(!$messages.querySelector('.row')){ rawBubble('⏱ 起動が遅れています。再初期化します…', true); init(); } }, 1200); }catch(e){ rawBubble('⚠️ 初期化エラー: '+e.message, true); }}

    if(document.readyState==='loading'){
      document.addEventListener('DOMContentLoaded', boot);
    }else{ boot(); }

  })();
  </script>
</body>
</html>
